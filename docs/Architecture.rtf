{\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset2 Symbol;}}
{\*\generator Riched20 6.2.9200}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs32\lang9 Technologies\b0\par
\fs22 We will use HTML,CSS and JavaScript as the main components to the program. PHP and SQL will be used on the backend to dynamically render certain content and also to store the data (for example, save the results from the quizzes)\par
\b\fs32\par
Front-End / Navigation\b0\par
\fs22 Each "page" will be a separate HTML file (with a .php extension). The following pages will exist:\par

\pard{\pntext\f1\'B7\tab}{\*\pn\pnlvlblt\pnf1\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b index.php\b0  - the home page; also allows users to set-up a new quiz\par
{\pntext\f1\'B7\tab}\b instructions.php\b0  - after setting up a quiz; a brief landing page before the first image shown\par
{\pntext\f1\'B7\tab}\b image-query.php\b0  - the main page that shows a quiz. this page shows a single image, initiates a timer + the recording functions; it is also responsible for certain interactions (space-bar) and for loading the next image.\par
{\pntext\f1\'B7\tab}\b new-language.php - \b0 after finishing a single language quiz; this page sets up for the next language\par
{\pntext\f1\'B7\tab}\b results.php\b0  - after completing the entire quiz; this page shows the final results (response times for each picture, etc)\par

\pard\sa200\sl276\slmult1 Navigation will be in mostly linear order as described above.- <image-query.php> will "refresh" itself (in some way, see below). This may either be through literal page-refreshes or through dynamic javascript. Aside from this, the pages progress in order from start to finish.\par
\b\fs32 Database Architecture\b0\par
\fs22 We use SQL databases to store the quiz information. We have the following objects (mostly corresponding one-to-one with tables):\par
\b Quiz:\b0  represents a generic, repeatable, quiz; Specifies information such as \ul number of questions\ulnone  and \ul\i order of questions\ulnone  \i0 (this is actually a map from (QuizID,LanguageIndex,QuestionIndex) to ImageID); Also specifies the \ul creator\ulnone  and \ul creation time\ulnone ; also has \ul # of languages\ulnone  and \ul which languages\ulnone  the quiz pertains to. These are created by users from the index page and (theoretically) should contain all the information needed to restart an identical quiz.\par
\b User:\b0  represents a user / participant in the study; Has \ul first name, last name, email address, sex, country of origin, native language\ulnone , etc. Generally has a bunch of personally identifiable information that can be used to validate a user, but also can be used for the sake of the study.\par
\b Image:\b0  a picture that can be used for quizzing; has an \ul image id / name\ulnone , a \ul URL\ulnone  (usually a .png or .jpg link); NOTE: There may be issues when files get renamed (SEE BELOW); This should hopefully be generated automatically, based on the file structure.\par
\b Session:\b0  a single sitting of a \ul user\ulnone  taking an instance of a \ul quiz\ulnone ; quiz-sessions keep track of the progress by keeping track of the \ul current language\ulnone  (an index) and the \ul current question\ulnone , \ul start time\ulnone , \ul status of quiz\ulnone , etc. In theory, if a user breaks connection to the server in any way, the QuizSession should be able to restore the user to the same spot of the same quiz if the user returns later. This also allows us to have a "Save" and "Continue" feature. We will likely give the session a "hash" as its \ul session id\ulnone  so that users can return to this later.\par
\b Result:\b0  the crucial piece of data; each row corresponds to a single \ul QuizSession\ulnone , a \ul language index\ulnone , and a \ul question index\ulnone . Basically records, for this session, the result of this question. Results include \ul response time (ms)\ulnone , \ul sound file name\ulnone  (maybe)\par
\ul MISC\ulnone\par
For ease of portability, we will use SQLite locally. Local copies will be overridden via git to avoid having to install and import SQL databases. The published (hosted) version of the app may use SQLite or MySQL (we should accomodate for this possibility in the code-base).\par
\par
\b\fs32 Front-End / Back-End Protocol\b0\par
\b\fs22 Templates:\b0  PHP will not be used heavily for HTML templating. Most of our HTML files (as described in the "Front-End / Navigating" section above) will use pure html with few exceptions. Javascript will be used to dynamically generate content. We may use PHP for the sake of global variables (for example, the App Name) and common page parts that we deem too much effort to repeat.\par
\b Creating Quizzes:\b0  A user can define a new quiz on the \i index.php\i0  page. Here, they enter in the quiz info (number of questions, languages, etc.) as well as their personal info. Once they hit submit on this page, they will be redirected to \i instructions.php\i0 , and the form information will be sent in as the $_POST variable (there may be an intermediate page that processes the data before redirecting to \i instructions.php\i0 ). This will define the new User and the new Quiz (i.e.: pick the set of questions and scramble them, etc.). All this is saved into the SQL Database. It will also prepare a new Session for this Quiz-User pair. Once the session is created, with a specific SessionID (probably a "Hash", see the Database Architecture above), the session can be referred to by this id at any time. This session id is also returned to the user (e.g.: in the PHP). It might also be emailed to them.\par
\b Starting a Quiz / Loading Questions / Etc.:\b0  from the \i instructions.php\i0  the user has some way to continue (usually by hitting "space bar"). This will redirect to \i image-query.php?session=<SESSIONID>\i0 . Basically, anytime \i image-query.php\i0  is hit, with a specific session id, it will continue that session (or start it, if applicable). Depending on the defintion of the quiz (question ordering), and the current state of the session (current language, current question), it will select the appropriate image to display, and return that into the PHP. It should also tell the front-end what language and question index this session is on\par
\b Recording Results:\b0  Once the \i image-query.php\i0  page is loaded, JavaScript takes over. JS and HTML5 are responsible for connecting to the microphone, starting the timer, and waiting for a response. Once a response is heard, JS will record all of this data and mark the reaction time. This key information (reaction time and sound data, as well as the particular session id, language index, and question index) will asynchronously be sent back to the server (say, to something called \i record-result.php\i0 ) via an AJAX POST call, once the sound goes quiet again and the user is considered to have "stopped" talking. Once the response comes back ("OK! ") the page signals that it's okay to go to the next question (NOTE: We may not necessarily need to wait for the response). In the back-end, \i record-result.php\i0  is simply responsible for constructing a Result object (i.e.: in the SQL database) for this particular session, language, question index tuple.\i\par
\b\i0 Saving / Continuing Quizzes: \b0 Because a Session is stored in the database, the user can stop and return to the quiz at any moment in time. If something crashes, everything should be fine. The only exception to this rule is if the user closes the browser during recording. If so, the recording will be lost, and the user must start the question over again. (This is not too bad, since it usually takes about 2 seconds to do a question.) To start a question over again, or to return to the quiz at any time, the user simply must navigate to \i image-query.php\i0  and pass in the session id.\b\par
Switching Languages:\b0  In the database, the Session will have a status corresponding to whether or not the quiz is currently Defined, In Progress, Waiting For Next Language, or Done (etc.) When \i record-result.php\i0  updates a Session row, it will also increment the current question and set the status if need be. If \i image-query.php\i0  is hit with a session that is in the Defined or "Waiting For Next Language" phase, it will redirect appropriately.\par
\par
\b\fs32 Misc. Architectural Decisions\b0\par
\b\fs22 Image-Query.php and Redirecting:\b0  It's easier (for now) to simply perform a browser refresh after each question. In the future we can do this dynamically with javascript.\par
\b Images and the Database:\b0  The Images table needs to stay in sync with the set of image files on the server. In the long run, I think there is room for a nice automated solution here. For now, we will assume there is no "images" table. Any reference to an image will refer directly to its local file name (as a string). This may cause issues if the file name changes (e.g.: if one of the developers adds / removes some images from the canonical image folder). However, we add one more fail-safe: on \i image-query.php\i0  when a specific image is to be returned, if the image no-longer exists, then it should choose an arbitrary one that hasn't been used yet in the given quiz.\par
\par
\b\fs32 Recording\b0\par
\fs22 On \i image-query.php\i0  page, we will use WebAudio and other modern HTML5/JS tricks to allow access to a microphone to capture the data.\par
\par
\b\i\fs32 Admin\i0  Directory\b0\par
\fs22 There are likely to be a few "administrative tasks" for which it would be nice to have a web interface. For example, when all the data is processed for a given session, maybe we want to go and see the session results. (Alternatively we could just same an html or excel file after each session).\par
Another, better example will be to run a database update script which updates the schema in SQL. This will allow us to easily update the schema, etc. Locally, this will be done in SQLite3, (which is file based), so only one person needs to update this, and then commit it.\par
In general, we should have an admin directory to keep track of these tasks. It will likely be password protected (somehow) so that only the developers can use it.\par
}
 